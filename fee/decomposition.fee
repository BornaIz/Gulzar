
# First, we use the ccmp feature (which is processed first by shaping)
# engines to decompose the dots. We provide a number of empty glyphs
# mapped to certain Unicode codepoints; for example, dad-ar is mapped
# to U+0636, but we never plan to use that glyph, but rather immediately
# turn it into its component parts: SADu1 and a dot above.
# Note that at this stage there are certain glyphs (e.g. JIM) which will
# have different dot patterns based on their position. We will fix that
# up in the relevant position-shaping feature.
Feature ccmp {
  Routine ccmp1 {
    Substitute BEu1 -> BEu1 sdb;
    Substitute teh-ar -> TEu1 dda;
    Substitute theh-ar -> TEu1 tda;
    Substitute dad-ar -> SADu1 sda;
    Substitute thal-ar -> DALu1 sda;
    Substitute zain-ar -> REu1 sda;
    Substitute sheen-ar -> SINu1 tda;
    Substitute ghain-ar -> AINu1 sda;
    Substitute feh-ar -> FEu1 sda;
    Substitute qaf-ar -> QAFu1 dda;
    Substitute peh-ar -> BEu1 tdb;
    Substitute rreh-ar -> REu1 toeda;
    Substitute tteh-ar -> BEu1 toeda;
    Substitute zah-ar -> TOEu1 sda;
    Substitute ddal-ar -> DALu1 toeda;
    Substitute jim-ar -> JIMu1;
    Substitute jeh-ar -> REu1 tda;
    Substitute wawHamzaabove-ar -> VAOu1 HAMZA_ABOVE;
    Substitute alefMadda-ar -> ALIFu1 MADDA;
    };

  Routine MarkLigatures {
    Substitute SHADDA DAMMA -> SHADDA_DAMMA;
    Substitute SHADDA FATHA -> SHADDA_FATHA;
    Substitute SHADDA KASRA -> SHADDA_KASRA;
    Substitute SHADDA LONG_A -> SHADDA_LONG_A;
  };
};

# In the fina feature, we want to achieve three things:
#  1) Select normal final forms (e.g. substitute DALu1 with DALf1)
#  2) Perform exceptions in the Final Forms Table which select f2 forms
#     Unfortunately we don't have the Final Forms Table for Qalmi,
#     so we have to guess.
#  3) Fix up position-specific dots for JIM and its friends, which we punted
#     on in the previous feature.
Feature fina {
  Routine yehfina {
      Substitute yeh-ar -> CH_YEu1 ddb;
  };
  Routine FinaSelection {
    Substitute [CH_YEu1 AINu1 HAYAu1 JIMu1 tcheh-ar khah-ar] { REu1 }    -> REf2;
    Substitute [HAYCu1 MIMu1 SADu1 SINu1 TOEu1] { REu1 }    -> REf3;

    Substitute JIMu1          { CH_YEu1 } -> CH_YEf2;

    # These are true in Qalmi but not in our design
    #Substitute [CH_YEu1 BEu1 noon-ar NUNu1] { NUNu1 } -> NUNf2;
    #Substitute [CH_YEu1 BEu1 noon-ar NUNu1] { noon-ar } -> NUNf2 sdi;

    # Substitute  [CH_YEu1 BEu1 noon-ar NUNu1 ] { HAYCu1 } -> HAYCf2;

    # We need the ignoremarks flag here because, after ccmp is done, there
    # may be some dots between e.g. BE and NUN.
  } IgnoreMarks;
  Routine FinaJimlike {

  # Now we fix up the JIM-likes.
  Substitute tcheh-ar -> JIMf1 tdi;
  Substitute khah-ar -> JIMf1 sda;
  Substitute hah-ar -> JIMf1;
  Substitute JIMu1 -> JIMf1 sdi;

  Substitute noon-ar -> NUNf1 sdi;

  # Yeh hamza is different, because it can take CH_YE form but no dots.
  Substitute yehHamzaabove-ar -> CH_YEf1 HAMZA_ABOVE;

  # Teh Marbuta Goal
  Substitute tehMarbutagoal-ar -> HAYCf1 dda;
  };
  # Because I'm lazy, SuffixingSubstitute is a custom plugin which creates
  # a substitution by filing off the last two characters of a glyph name and
  # appending the two characters on the right-side. i.e AINu1->f1 does
  # AINu1 -> AINf1
  Routine SuffixingSubstitutes {
  LoadPlugin qalamTools.SuffixingSubstitute;
  SuffixingSubstitute [
    AINu1 ALIFu1 BARI_YEu1 BEu1 CH_YEu1 DALu1 FEu1 GAFu1 HAYAu1
    HAYCu1 KAFu1 LAMu1 MIMu1 NUNu1 QAFu1 REu1 SADu1 SINu1 TOEu1
    VAOu1 TEu1 LAM_ALIFu1
  ] -> f1;
  };
};

# Nothing much special about the init feature, except that some glyphs
# take the forms of other rasm glyphs (e.g. QAF looks like a FE with no dot)
# in initial position, so we turn them into that. Also fix up JIM again.
Feature init {
  Routine init1 {
  Substitute noon-ar -> BEi1 sda;
  Substitute NUNu1 -> BEi1; # Noon ghunna has no dots
  Substitute CH_YEu1 -> BEi1 ddb;
  Substitute yeh-ar -> BEi1 ddb;
  Substitute QAFu1 -> FEi1;
  Substitute JIMu1    -> JIMi1 sdb;
  Substitute HAYCu1    -> HAYCi1 haydb;
  Substitute hah-ar -> JIMi1;
  Substitute tcheh-ar -> JIMi1 tdb;
  Substitute khah-ar -> JIMi1 sda;
  Substitute yehHamzaabove-ar -> BEi1 HAMZA_ABOVE;
  Substitute tehMarbutagoal-ar -> HAYCu1 tda;

  SuffixingSubstitute [
    AINu1 BEu1 FEu1 GAFu1 HAYAu1 KAFu1 LAMu1 MIMu1 SADu1 SINu1 TOEu1 TEu1
  ] -> i1;
  };
};

# medi is similar, except that (1) the Qalmi patent says that a penultimate
# BE between SIN and final BE should be an exception, (2) Right-joiners take
# final forms in medial position.
Feature medi {
  Routine Exception1 {
    Substitute [SINu1 SINi1 SINm1] { BEu1 } BEf1 -> BEm4;
  } IgnoreMarks;

  Routine medi1 {
  SuffixingSubstitute [
    AINu1 BEu1 FEu1 GAFu1 HAYAu1 KAFu1 LAMu1 MIMu1 SADu1 SINu1 TOEu1 TEu1
  ] -> m1;
  SuffixingSubstitute [DALu1 REu1] -> f1;

  Substitute QAFu1    -> FEm1;
  Substitute noon-ar  -> BEm1 sda;
  Substitute NUNu1    -> BEm1; # Noon ghunna
  Substitute JIMu1    -> JIMm1 sdb;
  Substitute tcheh-ar -> JIMm1 tdb;
  Substitute khah-ar  -> JIMm1 sda;
  Substitute CH_YEu1  -> BEm1 ddb;
  Substitute yeh-ar -> BEm1 ddb;
  Substitute hah-ar -> JIMm1;
  Substitute HAYCu1   -> HAYCm1 haydb;
  Substitute tehMarbutagoal-ar -> HAYCf1 dda;
  Substitute yehHamzaabove-ar -> BEm1 HAMZA_ABOVE;
  };
};

Feature isol {
Routine isol1 {
  Substitute yehHamzaabove-ar -> CH_YEu1 HAMZA_ABOVE;
  Substitute tehMarbutagoal-ar -> HAYCu1 dda;
  Substitute hah-ar -> JIMu1;
  Substitute noon-ar -> NUNu1 sdi;
};
};
